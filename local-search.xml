<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>卧推训练过程中发现的一个小问题</title>
    <link href="/2024/07/20/My-Second-Blog/"/>
    <url>/2024/07/20/My-Second-Blog/</url>
    
    <content type="html"><![CDATA[<p>满打满算健身也快一年了，身材也有了极其明显的变化。虽然因为长时间坐着不动外加kuku吃碳水导致腰上肉长得飞快，也正因此上半身感觉上下没啥分别。说回正题，这篇Blog主要是想聊一下我自己最近遇到的也是我这么长时间以来完全忽略的一点，还是两个健身房里的大佬一块换着练的时候被指出来的。</p><h1 id="提出问题"><a href="#提出问题" class="headerlink" title="提出问题"></a>提出问题</h1><p>这个问题说起来也不是很大，实际上就是很多健身博主都在说的卧推的时候手腕的位置。我自己刚开始是听了那些博主的话，乖乖的每次都强行让手腕保持中立位，但每次都感觉非常的别扭。由于是自己练再加上原本就很瘦，我的卧推重量现在也只是60KG做组，之前30、40KG时每次练完胸回来手腕倒是没有不舒服，到45+就开始不对劲了。每次练完胸回来都感觉手腕非常难受，有的时候还需要用云南白药喷雾。自打我开始健身就听说过TFCC，我自己当时也有点担心会不会是，也做了下自测什么的，但最后的结果都是没问题。到这里我已经产生奇怪的念头了，为什么我每次明明戴了护腕还是会不舒服呢？</p><h1 id="分析问题"><a href="#分析问题" class="headerlink" title="分析问题"></a>分析问题</h1><p>直到那天和两个大佬一起练，我才知道我自己的手腕是非常塌的，基本上可以说完美符合网上所说的全靠手腕支撑杠铃。在这里我画了个简图。<br><img src="/../img/second%20blog%20pic.jpg" alt="alt text"><br>可以看到左侧是正常的手腕处于中立位，如果用正常视角来看杠铃杆就是靠我们虎口下面的部分来支持，说到这里还需要提到掰杠，不过这个问题我们后面再说。而右边就是我之前的卧推姿势，手腕非常塌，通过受力分析可以得到一个结论。除了杠铃在手上的重力、我们给杠铃的推力，还有一个向斜下方的力。由于我们以这种姿势卧推是靠手掌托住杠铃，手腕收到的力等于我们的重力。而斜向下的力属于对抗我们重力过程中的副产物，同样作用于手腕。故而我们可以得出结论，斜向下的力和重力双重叠加导致我们的手腕受到了大于杠铃本身的重力。</p><p>那么为什么说当保持中立位的时候我们的手腕不会受到那么大的力呢？这里我们需要了解到一个事情。当我们的手腕在中立位时，我们的手腕、手肘、小臂处于同一条线，力线垂直向下，重力垂直作用于前臂，相当于我们整个前臂来对抗重力。反观塌腕时我们单纯用手腕来对抗，很明显保持中立位是对我们的手腕很友好的。</p><h1 id="掰杠"><a href="#掰杠" class="headerlink" title="掰杠"></a>掰杠</h1><p>再说会掰杠，为什么很多博主会刻意提到掰杠中整个操作。这里我们来观察下，当我们不使用掰杠，单纯用正常的卧推姿势去卧推，我们杠铃位于我们的大鱼际上，这时我们可以发现，杠铃的重心是略微偏离我们的小臂垂直线的，这样可能会造成手腕略微压力增大。而我们手腕微微外旋我们就能发现，大鱼际和小鱼际近似处于一个平面，而平面和我们的小臂垂直线属于垂直。这时我们就可以达到我们前面所说的手腕中立位的“完美”卧推上臂姿势。</p><p>当然并不是说不掰杠就不好，掰杠的作用并不是单纯的为了减弱那么一丢丢力，而是我们的手腕本身就非常脆弱，软组织一旦损伤可以说这辈子都可能健身和say goodbye，毕竟这个软组织恢复慢、影响大，为了我们的日常生活和训练生活，我们一定要在动作标准的情况下尽最大可能避免受伤。</p><p>接下来就要说到掰杠最大的作用了——增加稳定性。健身的人通常都会熟悉一个名词叫做肩胛骨，可以说得肩胛骨者得天下（这话怎么和高中那会的得语文者得天下一模一样，不会提出这句话的人是语文老师吧）。肩胛骨负责了我们上半身非常多的作用，而卧推的准备过程中我们需要沉肩、稳定肩胛骨、稳定下半身、背部肌肉绷紧。这些无一例外都是为了稳定二字。而我们的掰杠，很大程度上是为了辅助我们去稳定肩胛骨，根据我微不足道的观察发现，现代人因为长时间伏案工作、滑手机已经导致我们的肩胛骨很容易形成翼状肩胛。翼状肩胛不仅难看而且非常影响我们的卧推稳定性（本次不讨论翼状肩胛对背部的影响，这个后续会写我自己背部训练还是有一定心得的）。也正因此掰杠提供的额外增加就很好的进行了补充。可以试一试先沉肩然后空手外旋，这时会发现我们的肩胛骨位置有明显的感觉。也正因此换到卧推当中，掰杠可以提供给我们额外的稳定性，让我们不至于把卧推做成诺克萨斯断头台🤣</p><p>好的，相信看到这里的朋友已经明白为什么我会写这篇Blog了。从我自身角度来说，被指出问题后我对手腕姿势进行了修改，后续我卧推后也没有再出现特别难受的情况。同时我也去学习了掰杠技巧，进一步增强了卧推（虽然重量依旧没变化，大夏天真的吃啥都掉体重）。所以，我这一年中不断的磨合我的动作，不断上重量，不断学习。之前看到有人说过一句话“健身就是一年增重一年减重改动作的不断循环”，从我个人角度而言，我并不反对这句话，因为我自己这一年也是这么走过来的，从哑铃卧推6KG到现在的杠铃卧推60KG，从辅助引体需要50KG（那会我体重不到60）到现在轻松自重引体。但在这过程中我自己也在不断的反思学习，任何事情都是需要不断学习打磨，不断完善，世间并无一蹴而就的事情。</p><h1 id="结束咯😝"><a href="#结束咯😝" class="headerlink" title="结束咯😝"></a>结束咯😝</h1><p>好咯，这次的Blog就到这里结束啦，有兴趣的朋友可以去我的IG看我拍的健身照片，不过应该看不出来啥区别，毕竟我发的时候已经有了一些变化了，最早很瘦的应该是没有的。</p>]]></content>
    
    
    <categories>
      
      <category>健身记录</category>
      
    </categories>
    
    
    <tags>
      
      <tag>健身</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>360技术综合H卷笔试——编程题记录</title>
    <link href="/2024/07/20/My-First-Blog/"/>
    <url>/2024/07/20/My-First-Blog/</url>
    
    <content type="html"><![CDATA[<p>360是我七月初就已经投的公司，同时也是我今年秋招第一个拿到笔试的公司。在考前按照往年的试卷估计题目应该是40道客观题2道编程题。实际结果也如预期一般，30多道的单选题，为数不多的多选题（每个卷子的题型不一样，maybe我这个卷子的少）以及2个编程题。接下来我将尽可能完整的复刻题目并阐述我自己的做法，同时也会附加我自己的代码，望各位看官满意。</p><h2 id="第一题-加密算法"><a href="#第一题-加密算法" class="headerlink" title="第一题 加密算法"></a><strong>第一题 加密算法</strong></h2><p>有两个人在研究加密算法，一个人提出对只包含小写英文字母的字符串，将 ’a’替换成 ’1’，将 ’b’;替换成 ’2’……，将 ’z’替换成 ’26’。比如一个字符串 ’aabac’（想不起来了，我编的），加密后变成了 ’11213’，但另外一个人提出困难会造成多个结果，就比如 ’11213’也可能是 ’kbm’，会产生多个结果。所以我们要做的就是计算某个加密后的字符串可能对应的原字符串个数，要求取模10^9+7。</p><p>输入：</p><p>第一行n是加密后的字符串长度</p><p>第二行是加密后的字符串</p><p>输出：</p><p>一个正整数表示原字符串个数</p><p>样例输入：</p><p>5</p><p>11213</p><p>样例输出：</p><p>8</p><p>在做题的时候我就感觉这题怎么这么熟悉，考完一看才发现这不就是leetcode 91 解码方法。</p><p>既然提到了那就顺便说一下这道题的思路吧，如果实在需要代码可以直接用笔试题的代码稍微改改应该maybe也能行？</p><p>首先这道题需要对一个问题进行多次匹配求解出多个情况。也就是说字符串’11213’可能被分为’1’和’1213’也可能被分为’11’和’213’类似于这样的不断进行。故而就想到了动态规划来解决。<br>接下来就需要具体构建：</p><ol><li>定义一个数组dp，其中dp[i]表示长度为i的加密字符串可能解码出的原字符串个数。</li><li>设置初始条件dp[0] &#x3D; 1，即空字符串有一种解码方式。</li><li>状态转移：<ul><li>如果当前字符可以作为有效的单字符解码(1 &lt;&#x3D; s[i - 1] &lt;&#x3D; 9)，则dp[i] +&#x3D; dp[i - 1]</li><li>如果当前字符和前一个字符可以作为一个有效的双字符解码(10 &lt;&#x3D; s[i - 2:i] &lt;&#x3D; 26)，则dp[i] +&#x3D; dp[i - 2]</li></ul></li><li>最终结果为dp[n]</li></ol><p>好的，接下来回到笔试的考题加密算法本身。</p><p>首先分析问题，我们需要给每个字母进行一一对应；加密后的字符串可能对应多个原字符串；我们需要对结果进行取模。<br>接下来来说说具体的思路：</p><ol><li>使用动态规划来解决</li><li>创建一个数组dp，其中dp[i]表示前i个数字可能对应的原字符串</li><li>对每个位置i，我们需要考虑单独解码和组合解码</li></ol><p>借助这个大致思路得到了下面的代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">count_possible_string</span>(<span class="hljs-params">encoded</span>):<br>    MOD = <span class="hljs-number">1000000007</span><br>    n = <span class="hljs-built_in">len</span>(encoded)<br>    dp = [<span class="hljs-number">0</span>] * (n + <span class="hljs-number">1</span>)<br>    dp[<span class="hljs-number">0</span>] = <span class="hljs-number">1</span><br>    dp[<span class="hljs-number">1</span>] = <span class="hljs-number">1</span> <span class="hljs-keyword">if</span> encoded[<span class="hljs-number">0</span>] != <span class="hljs-string">&#x27;0&#x27;</span> <span class="hljs-keyword">else</span> <span class="hljs-number">0</span><br>    <br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">2</span>, n + <span class="hljs-number">1</span>):<br>        <span class="hljs-comment"># 单独解码</span><br>        <span class="hljs-keyword">if</span> encoded[i - <span class="hljs-number">1</span>] != <span class="hljs-string">&#x27;0&#x27;</span>:<br>            dp[i] = dp[i - <span class="hljs-number">1</span>]<br>        <span class="hljs-comment"># 组合解码</span><br>        two_digit = <span class="hljs-built_in">int</span>(encoded[i - <span class="hljs-number">2</span>:i])<br>        <span class="hljs-keyword">if</span> <span class="hljs-number">10</span> &lt;= two_digit &lt;= <span class="hljs-number">26</span>:<br>            dp[i] = (dp[i] + dp[i - <span class="hljs-number">2</span>]) % MOD<br><br>    <span class="hljs-keyword">return</span> dp[n]<br><br><span class="hljs-comment"># 输入</span><br>n = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>())<br>encoded = <span class="hljs-built_in">input</span>()<br><br><span class="hljs-comment"># 输出</span><br>result = count_possible_string(encoded)<br><span class="hljs-built_in">print</span>(result)<br></code></pre></td></tr></table></figure><p>到这里第一题就结束了，不过我需要说明一点的是，我的代码并不是最优代码，只是能AC这道题，这里也只是提供一种代码和一种思路。</p><h2 id="第二题-传染病防控"><a href="#第二题-传染病防控" class="headerlink" title="第二题 传染病防控"></a>第二题 传染病防控</h2><p>某市正在进行传染病防控，某市有n个人，每个人有一个位置$(x_{i},y_{i})$。现在已知有一个是高风险人员，但不知道是谁。同时我们定义一个安全距离k，如果某个人和这个高风险人员的距离不超过k，那么这个人也将被列为高风险人员。所以我们现在需要帮工作人员得到最多的高风险人员数量。两个人$(x_1,y_1),(x_2,y_2)$的距离公式为$|x_1-x_2| + |y_1 - y_2|$。</p><p>输入描述：</p><p>一行两个整数n，k</p><p>接下来一行n个整数分别表示$x_1$到$x_n$</p><p>接下来一行n个整数分别表示$y_1$到$y_n$</p><p>输出描述：</p><p>输出一个整数表示最多的高风险人员数量</p><p>样例输入：（这里因为debug了好几遍输了好几遍所以还有记录，可以用原本的数）</p><p>5 2</p><p>8 6 1 5 1</p><p>4 4 3 4 6</p><p>样例输出：</p><p>3</p><p>首先明确一点，这个距离公式就是常用的曼哈顿距离，所以在正式写算法前需要先把这个距离公式给写了。</p><p>接下来说一下我的大致思路：</p><ol><li>首先构建图，根据输入的坐标和距离构建邻接矩阵<code>ajd</code></li><li>图的遍历：这里根据惯例选择DFS或BFS来遍历图，我选的是BFS，以此计算出某一点出发的最大连通节点数。</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">max_high_risk</span>(<span class="hljs-params">n, k, x, y</span>):<br>    <span class="hljs-keyword">from</span> collections <span class="hljs-keyword">import</span> deque<br><br>    <span class="hljs-comment"># 曼哈顿距离公式</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">manhatten_distance</span>(<span class="hljs-params">x1, y1, x2, y2</span>):<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">abs</span>(x1 - x2) + <span class="hljs-built_in">abs</span>(y1 - y2)<br><br>    <span class="hljs-comment"># 构建邻接表，adj[i]表示与第i个人相邻的所有人</span><br>    adj = [[] <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n)]<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n):<br>        <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(i + <span class="hljs-number">1</span>, n):<br>            <span class="hljs-keyword">if</span> manhatten_distance(x[i], y[i], x[j], y[j]) &lt;= k:<br>                adj[i].append(j)<br>                adj[j].append(i)<br><br>    <span class="hljs-comment"># 构建BFS            </span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">bfs</span>(<span class="hljs-params">start</span>):<br>        queue = deque([start])<br>        visited = <span class="hljs-built_in">set</span>([start])<br>        count = <span class="hljs-number">1</span><br>        <span class="hljs-keyword">while</span> queue:<br>            current = queue.popleft()<br>            <span class="hljs-keyword">for</span> neighbor <span class="hljs-keyword">in</span> adj[current]:<br>                <span class="hljs-keyword">if</span> neighbor <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> visited:<br>                    queue.append(neighbor)<br>                    visited.add(neighbor)<br>                    count += <span class="hljs-number">1</span><br>        <span class="hljs-keyword">return</span> count<br><br>    max_count = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n):<br>        max_count = <span class="hljs-built_in">max</span>(max_count, bfs(i))<br>    <span class="hljs-keyword">return</span> max_count<br><br><span class="hljs-comment"># 输入</span><br>n, k = <span class="hljs-built_in">map</span>(<span class="hljs-built_in">int</span>, <span class="hljs-built_in">input</span>().split())<br>x = <span class="hljs-built_in">list</span>(<span class="hljs-built_in">map</span>(<span class="hljs-built_in">int</span>, <span class="hljs-built_in">input</span>().split()))<br>y = <span class="hljs-built_in">list</span>(<span class="hljs-built_in">map</span>(<span class="hljs-built_in">int</span>, <span class="hljs-built_in">input</span>().split()))<br><br><span class="hljs-comment"># 输出</span><br><span class="hljs-built_in">print</span>(max_high_risk(n, k, x, y))<br></code></pre></td></tr></table></figure><p>到这里第二题也就结束了，我当时这道题debug了好几遍，第一次是输入不对，第二次是邻接矩阵出问题，到第三次才成功AC。再次说明我的代码仅仅只能通过所有样例完成这道题，并不是最优解。</p><p>最后附上一张在食堂吃饭的时候拍到的学长，超乖的一只猫咪，就是动作有那么一丝丝不文雅。</p><p><img src="/../img/first%20blog%20cover.jpg" alt="alt text"></p>]]></content>
    
    
    <categories>
      
      <category>笔试记录</category>
      
    </categories>
    
    
    <tags>
      
      <tag>笔试</tag>
      
      <tag>算法题</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
