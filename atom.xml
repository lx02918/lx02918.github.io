<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Seth的小站</title>
  
  
  <link href="https://lx02918.github.io/atom.xml" rel="self"/>
  
  <link href="https://lx02918.github.io/"/>
  <updated>2024-07-21T09:59:35.858Z</updated>
  <id>https://lx02918.github.io/</id>
  
  <author>
    <name>Seth</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Leetcode刷题——滑动窗口</title>
    <link href="https://lx02918.github.io/2024/07/21/my-third-post/"/>
    <id>https://lx02918.github.io/2024/07/21/my-third-post/</id>
    <published>2024-07-21T07:34:28.000Z</published>
    <updated>2024-07-21T09:59:35.858Z</updated>
    
    <content type="html"><![CDATA[<p>这篇Blog将分享我自己在做Leetcode面试经典150题中滑动窗口部分几道题的思路，let’s go。</p><h2 id="209-长度最小的子数组"><a href="#209-长度最小的子数组" class="headerlink" title="209.长度最小的子数组"></a>209.长度最小的子数组</h2><h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p>给定一个含有 <code>n</code> 个正整数的数组和一个正整数 <code>target</code> 。</p><p>找出该数组中满足其总和大于等于 <code>target</code> 的长度最小的子数组 [$nums_l$, $nums_{l+1}$, …, $nums_{r - 1}$, $nums_r$] ，并返回其长度。如果不存在符合条件的子数组，返回 <code>0</code> 。</p><p>示例 1：</p><pre><code class="hljs">输入：target = 7, nums = [2,3,1,2,4,3]输出：2解释：子数组 `[4,3]` 是该条件下的长度最小的子数组。</code></pre><p>示例 2：</p><pre><code class="hljs">输入：target = 4, nums = [1,4,4]输出：1</code></pre><p>示例 3：</p><pre><code class="hljs">输入：target = 11, nums = [1,1,1,1,1,1,1,1]输出：0</code></pre><p>提示：</p><p><code>1 &lt;= target &lt;= 109</code></p><p><code>1 &lt;= nums.length &lt;= 105</code></p><p><code>1 &lt;= nums[i] &lt;= 105</code></p><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><ol><li>第一个while循环中total不断累加end位置上的值</li><li>第二个循环判断total &gt;&#x3D; target，这时满足了条件中所说的大于等于</li><li>用ans来存储数组，并对其进行最小值比较</li><li>total和start都后移，窗口滑动一位</li></ol><p>提示：</p><p>这里的窗口并不是一成不变的，而是不断累加到满足条件，期间窗口可能包含一个两个三个数。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">minSubArrayLen</span>(<span class="hljs-params">self, target:<span class="hljs-built_in">int</span>, nums: <span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>]</span>) -&gt; <span class="hljs-built_in">int</span>:<br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> nums: <span class="hljs-keyword">return</span> <span class="hljs-number">0</span><br>        n = <span class="hljs-built_in">len</span>(nums)<br>        ans = n + <span class="hljs-number">1</span><br>        start, end = <span class="hljs-number">0</span>, <span class="hljs-number">0</span><br>        total = <span class="hljs-number">0</span><br>        <span class="hljs-keyword">while</span> end &lt; n:<br>            total += nums[end]<br>            <span class="hljs-keyword">while</span> total &gt;= target:<br>                ans = <span class="hljs-built_in">min</span>(ans, end - start + <span class="hljs-number">1</span>)<br>                total -= nums[start]<br>                start += <span class="hljs-number">1</span><br>            end += <span class="hljs-number">1</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span> <span class="hljs-keyword">if</span> ans == n + <span class="hljs-number">1</span> <span class="hljs-keyword">else</span> ans<br></code></pre></td></tr></table></figure><h3 id="时间复杂度"><a href="#时间复杂度" class="headerlink" title="时间复杂度"></a>时间复杂度</h3><p>时间复杂度O(n)，执行用时60ms，消耗内存26.9MB</p><h2 id="3-无重复字符的最长字串"><a href="#3-无重复字符的最长字串" class="headerlink" title="3.无重复字符的最长字串"></a>3.无重复字符的最长字串</h2><p>给定一个字符串 <code>s</code> ，请你找出其中不含有重复字符的<strong>最长子串</strong>的长度。</p><p>示例 1:</p><pre><code class="hljs">输入: s = &quot;abcabcbb&quot;输出: 3 解释: 因为无重复字符的最长子串是 `&quot;abc&quot;`，所以其长度为 3。</code></pre><p>示例 2:</p><pre><code class="hljs">输入: s = &quot;bbbbb&quot;输出: 1解释: 因为无重复字符的最长子串是 `&quot;b&quot;`，所以其长度为 1。</code></pre><p>示例 3:</p><pre><code class="hljs">输入: s = &quot;pwwkew&quot;输出: 3解释: 因为无重复字符的最长子串是 `&quot;wke&quot;`，所以其长度为 3。请注意，你的答案必须是**子串**的长度，`&quot;pwke&quot;` 是一个子序列，不是子串。</code></pre><p>提示：</p><p><code>0 &lt;= s.length &lt;= 5 * 104</code></p><p><code>s</code> 由英文字母、数字、符号和空格组成</p><h3 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h3><ol><li>首先确定需要使用滑动窗口和哈希表</li><li>哈希表用于存储字符和其对应的索引</li><li>当字符已经存在于哈希表中，对应的滑动窗口左边界移到该字符存储于哈希表中的索引位置</li><li>涉及到四个初始变量。<code>n</code>表示s的长度，<code>ans</code>用于存储结果，哈希表<code>mp</code>，指针<code>j</code>表示左边界</li></ol><h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">lengthOfLongestSubstring</span>(<span class="hljs-params">self, s: <span class="hljs-built_in">str</span></span>) -&gt; <span class="hljs-built_in">int</span>:<br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> s: <span class="hljs-keyword">return</span> <span class="hljs-number">0</span><br>        n = <span class="hljs-built_in">len</span>(s)<br>        ans = <span class="hljs-number">0</span><br>        mp = &#123;&#125;<br>        j = <span class="hljs-number">0</span><br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n):<br>            <span class="hljs-keyword">if</span> s[i] <span class="hljs-keyword">in</span> mp:<br>                j = <span class="hljs-built_in">max</span>(mp[s[i]], j)<br>            ans = <span class="hljs-built_in">max</span>(ans, i - j + <span class="hljs-number">1</span>)<br>            mp[s[i]] = i + <span class="hljs-number">1</span><br>        <span class="hljs-keyword">return</span> ans<br></code></pre></td></tr></table></figure><h3 id="时间复杂度-1"><a href="#时间复杂度-1" class="headerlink" title="时间复杂度"></a>时间复杂度</h3><p>时间复杂度O(n)，执行用时52ms，消耗内存16.5MB</p><h2 id="30-串联所有单词的子串"><a href="#30-串联所有单词的子串" class="headerlink" title="30.串联所有单词的子串"></a>30.串联所有单词的子串</h2><p>给定一个字符串 <code>s</code> 和一个字符串数组 <code>words</code>。 <code>words</code> 中所有字符串 <strong>长度相同</strong>。</p><p><code>s</code> 中的 <strong>串联子串</strong> 是指一个包含  <code>words</code> 中所有字符串以任意顺序排列连接起来的子串。</p><ul><li>例如，如果 <code>words = [&quot;ab&quot;,&quot;cd&quot;,&quot;ef&quot;]</code>， 那么 <code>&quot;abcdef&quot;</code>， <code>&quot;abefcd&quot;</code>，<code>&quot;cdabef&quot;</code>， <code>&quot;cdefab&quot;</code>，<code>&quot;efabcd&quot;</code>， 和 <code>&quot;efcdab&quot;</code> 都是串联子串。 <code>&quot;acdbef&quot;</code> 不是串联子串，因为他不是任何 <code>words</code> 排列的连接。</li></ul><p>返回所有串联子串在 <code>s</code> 中的开始索引。你可以以 <strong>任意顺序</strong> 返回答案。</p><p>示例1：</p><pre><code class="hljs">输入：s = &quot;barfoothefoobarman&quot;, words = [&quot;foo&quot;,&quot;bar&quot;]输出：`[0,9]`解释：因为 words.length == 2 同时 words[i].length == 3，连接的子字符串的长度必须为 6。子串 &quot;barfoo&quot; 开始位置是 0。它是 words 中以 [&quot;bar&quot;,&quot;foo&quot;] 顺序排列的连接。子串 &quot;foobar&quot; 开始位置是 9。它是 words 中以 [&quot;foo&quot;,&quot;bar&quot;] 顺序排列的连接。输出顺序无关紧要。返回 [9,0] 也是可以的。</code></pre><p>示例2：</p><pre><code class="hljs">输入：s = &quot;wordgoodgoodgoodbestword&quot;, words = [&quot;word&quot;,&quot;good&quot;,&quot;best&quot;,&quot;word&quot;]输出：`[]`解释：因为 words.length == 4 并且 words[i].length == 4，所以串联子串的长度必须为 16。s 中没有子串长度为 16 并且等于 words 的任何顺序排列的连接。所以我们返回一个空数组。</code></pre><p>示例 3：</p><pre><code class="hljs">输入：s = &quot;barfoofoobarthefoobarman&quot;, words = [&quot;bar&quot;,&quot;foo&quot;,&quot;the&quot;]输出：`[6,9,12]`解释：因为 words.length == 3 并且 words[i].length == 3，所以串联子串的长度必须为 9。子串 &quot;foobarthe&quot; 开始位置是 6。它是 words 中以 [&quot;foo&quot;,&quot;bar&quot;,&quot;the&quot;] 顺序排列的连接。子串 &quot;barthefoo&quot; 开始位置是 9。它是 words 中以 [&quot;bar&quot;,&quot;the&quot;,&quot;foo&quot;] 顺序排列的连接。子串 &quot;thefoobar&quot; 开始位置是 12。它是 words 中以 [&quot;the&quot;,&quot;foo&quot;,&quot;bar&quot;] 顺序排列的连接。</code></pre><p>提示：</p><p><code>1 &lt;= s.length &lt;= 104</code></p><p><code>1 &lt;= words.length &lt;= 5000</code></p><p><code>1 &lt;= words[i].length &lt;= 30</code></p><p><code>words[i]</code> 和 <code>s</code> 由小写英文字母组成</p><h3 id="思路-2"><a href="#思路-2" class="headerlink" title="思路"></a>思路</h3><ol><li>最开始初始化五个变量，<code>word_len</code>单词长度，<code>total_len</code>单词长度之和，<code>word_map</code>用Counter记录每个单词出现的次数，<code>ans</code>用于存储结果</li><li>滑动窗口每次滑动一个单词长度，当我们窗口内的单词出现次数和原本的不匹配就移动右边界，直到窗口内单词计数不超过原始计数</li></ol><h3 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">findSubstring</span>(<span class="hljs-params">self, s: <span class="hljs-built_in">str</span>, words: <span class="hljs-type">List</span>[<span class="hljs-built_in">str</span>]</span>) -&gt; <span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>]:<br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> s <span class="hljs-keyword">or</span> <span class="hljs-keyword">not</span> words:<br>            <span class="hljs-keyword">return</span> []<br><br>        word_len = <span class="hljs-built_in">len</span>(words[<span class="hljs-number">0</span>])<br>        word_count = <span class="hljs-built_in">len</span>(words)<br>        total_len = word_len * word_count<br>        word_map = Counter(words)<br>        ans = []<br><br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(word_len):<br>            left = i<br>            right = i<br>            cur_map = Counter()<br>            <span class="hljs-keyword">while</span> right + word_len &lt;= <span class="hljs-built_in">len</span>(s):<br>                word = s[right:right + word_len]<br>                right += word_len<br>                <span class="hljs-keyword">if</span> word <span class="hljs-keyword">in</span> word_map:<br>                    cur_map[word] += <span class="hljs-number">1</span><br>                    <span class="hljs-keyword">while</span> cur_map[word] &gt; word_map[word]:<br>                        cur_map[s[left:left + word_len]] -= <span class="hljs-number">1</span><br>                        left += word_len<br>                    <span class="hljs-keyword">if</span> right - left == total_len:<br>                        ans.append(left)<br>                <span class="hljs-keyword">else</span>:<br>                    cur_map.clear()<br>                    left = right<br><br>        <span class="hljs-keyword">return</span> ans<br></code></pre></td></tr></table></figure><h3 id="时间复杂度-2"><a href="#时间复杂度-2" class="headerlink" title="时间复杂度"></a>时间复杂度</h3><p>时间复杂度O(n * m)，执行时间72ms，消耗内存17.1MB</p><h2 id="76-最小覆盖子串"><a href="#76-最小覆盖子串" class="headerlink" title="76 最小覆盖子串"></a>76 最小覆盖子串</h2><p>给你一个字符串 <code>s</code> 、一个字符串 <code>t</code> 。返回 <code>s</code> 中涵盖 <code>t</code> 所有字符的最小子串。如果 <code>s</code> 中不存在涵盖 <code>t</code> 所有字符的子串，则返回空字符串 <code>&quot;&quot;</code> 。</p><p>注意：</p><ul><li>对于 <code>t</code> 中重复字符，我们寻找的子字符串中该字符数量必须不少于 <code>t</code> 中该字符数量。</li><li>如果 <code>s</code> 中存在这样的子串，我们保证它是唯一的答案。</li></ul><p>示例1：</p><pre><code class="hljs">输入：s = &quot;ADOBECODEBANC&quot;, t = &quot;ABC&quot;输出：&quot;BANC&quot;解释：最小覆盖子串 &quot;BANC&quot; 包含来自字符串 t 的 &#39;A&#39;、&#39;B&#39; 和 &#39;C&#39;。</code></pre><p>示例 2：</p><pre><code class="hljs">输入：s = &quot;a&quot;, t = &quot;a&quot;输出：&quot;a&quot;解释：整个字符串 s 是最小覆盖子串。</code></pre><p>示例 3:</p><pre><code class="hljs">输入: s = &quot;a&quot;, t = &quot;aa&quot;输出: &quot;&quot;解释: t 中两个字符 &#39;a&#39; 均应包含在 s 的子串中，因此没有符合条件的子字符串，返回空字符串。</code></pre><p>提示：</p><p><code>m == s.length</code><br><code>n == t.length</code><br><code>1 &lt;= m, n &lt;= 105</code><br><code>s</code> 和 <code>t</code> 由英文字母组成</p><h3 id="思路-3"><a href="#思路-3" class="headerlink" title="思路"></a>思路</h3><ol><li>初始化五个变量，<code>need</code>用于记录<code>t</code>每个字符的需求数量，<code>missing</code>用于记录还需要匹配的字符数量，<code>left</code>左边界，<code>start</code>起始位置，<code>min_len</code>长度，<code>ans</code>存储结果</li><li>滑动窗口使用right指针遍历字符串<code>s</code>，如果当前字符在<code>need</code>中数量大于0则减少<code>missing</code>表示需求字符少一个</li><li>当<code>missing</code>为0即窗口内包含所有所需字符，移动left继续遍历直到 <code>need[s[left]]</code> 不再小于 0。</li></ol><h3 id="代码-3"><a href="#代码-3" class="headerlink" title="代码"></a>代码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">minWindow</span>(<span class="hljs-params">self, s: <span class="hljs-built_in">str</span>, t: <span class="hljs-built_in">str</span></span>) -&gt; <span class="hljs-built_in">str</span>:<br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> s <span class="hljs-keyword">or</span> <span class="hljs-keyword">not</span> t: <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;&quot;</span><br>        need = Counter(t)<br>        missing = <span class="hljs-built_in">len</span>(t)<br>        left = start = <span class="hljs-number">0</span><br>        min_len = <span class="hljs-built_in">float</span>(<span class="hljs-string">&#x27;inf&#x27;</span>)<br>        ans = <span class="hljs-string">&quot;&quot;</span><br>        <br>        <span class="hljs-keyword">for</span> right, char <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(s, <span class="hljs-number">1</span>):<br>            <span class="hljs-keyword">if</span> need[char] &gt; <span class="hljs-number">0</span>:<br>                missing -= <span class="hljs-number">1</span><br>            need[char] -= <span class="hljs-number">1</span><br>            <br>            <span class="hljs-keyword">if</span> missing == <span class="hljs-number">0</span>:<br>                <span class="hljs-keyword">while</span> left &lt; right <span class="hljs-keyword">and</span> need[s[left]] &lt; <span class="hljs-number">0</span>:<br>                    need[s[left]] += <span class="hljs-number">1</span><br>                    left += <span class="hljs-number">1</span><br>                    <br>                <span class="hljs-keyword">if</span> right - left &lt; min_len:<br>                    min_len = right - left<br>                    ans = s[left:right]<br>                    <br>                need[s[left]] += <span class="hljs-number">1</span><br>                left += <span class="hljs-number">1</span><br>                missing += <span class="hljs-number">1</span><br>        <span class="hljs-keyword">return</span> ans<br></code></pre></td></tr></table></figure><h3 id="时间复杂度-3"><a href="#时间复杂度-3" class="headerlink" title="时间复杂度"></a>时间复杂度</h3><p>时间复杂度O(n)，执行用时108ms，消耗内存16.8MB</p><p>好的，滑动窗口部分的题目就四个，到这里就结束了。滑动窗口的核心思路就在于不断移动窗口去匹配题设所给出的条件，之前刷2024春招100题那会还没特别明白这部分，现在也是彻底会了🤣不过还是不想笔试或面试遇到，这个真的好烦。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;这篇Blog将分享我自己在做Leetcode面试经典150题中滑动窗口部分几道题的思路，let’s go。&lt;/p&gt;
&lt;h2 id=&quot;209-长度最小的子数组&quot;&gt;&lt;a href=&quot;#209-长度最小的子数组&quot; class=&quot;headerlink&quot; title=&quot;209.长度最</summary>
      
    
    
    
    <category term="刷题记录" scheme="https://lx02918.github.io/categories/%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/"/>
    
    
    <category term="Leetcode" scheme="https://lx02918.github.io/tags/Leetcode/"/>
    
    <category term="刷题" scheme="https://lx02918.github.io/tags/%E5%88%B7%E9%A2%98/"/>
    
    <category term="滑动窗口" scheme="https://lx02918.github.io/tags/%E6%BB%91%E5%8A%A8%E7%AA%97%E5%8F%A3/"/>
    
  </entry>
  
  <entry>
    <title>卧推训练过程中发现的一个小问题</title>
    <link href="https://lx02918.github.io/2024/07/20/My-Second-Blog/"/>
    <id>https://lx02918.github.io/2024/07/20/My-Second-Blog/</id>
    <published>2024-07-20T15:34:06.000Z</published>
    <updated>2024-07-20T16:32:41.952Z</updated>
    
    <content type="html"><![CDATA[<p>满打满算健身也快一年了，身材也有了极其明显的变化。虽然因为长时间坐着不动外加kuku吃碳水导致腰上肉长得飞快，也正因此上半身感觉上下没啥分别。说回正题，这篇Blog主要是想聊一下我自己最近遇到的也是我这么长时间以来完全忽略的一点，还是两个健身房里的大佬一块换着练的时候被指出来的。</p><h1 id="提出问题"><a href="#提出问题" class="headerlink" title="提出问题"></a>提出问题</h1><p>这个问题说起来也不是很大，实际上就是很多健身博主都在说的卧推的时候手腕的位置。我自己刚开始是听了那些博主的话，乖乖的每次都强行让手腕保持中立位，但每次都感觉非常的别扭。由于是自己练再加上原本就很瘦，我的卧推重量现在也只是60KG做组，之前30、40KG时每次练完胸回来手腕倒是没有不舒服，到45+就开始不对劲了。每次练完胸回来都感觉手腕非常难受，有的时候还需要用云南白药喷雾。自打我开始健身就听说过TFCC，我自己当时也有点担心会不会是，也做了下自测什么的，但最后的结果都是没问题。到这里我已经产生奇怪的念头了，为什么我每次明明戴了护腕还是会不舒服呢？</p><h1 id="分析问题"><a href="#分析问题" class="headerlink" title="分析问题"></a>分析问题</h1><p>直到那天和两个大佬一起练，我才知道我自己的手腕是非常塌的，基本上可以说完美符合网上所说的全靠手腕支撑杠铃。在这里我画了个简图。<br><img src="/../img/second%20blog%20pic.jpg" alt="alt text"><br>可以看到左侧是正常的手腕处于中立位，如果用正常视角来看杠铃杆就是靠我们虎口下面的部分来支持，说到这里还需要提到掰杠，不过这个问题我们后面再说。而右边就是我之前的卧推姿势，手腕非常塌，通过受力分析可以得到一个结论。除了杠铃在手上的重力、我们给杠铃的推力，还有一个向斜下方的力。由于我们以这种姿势卧推是靠手掌托住杠铃，手腕收到的力等于我们的重力。而斜向下的力属于对抗我们重力过程中的副产物，同样作用于手腕。故而我们可以得出结论，斜向下的力和重力双重叠加导致我们的手腕受到了大于杠铃本身的重力。</p><p>那么为什么说当保持中立位的时候我们的手腕不会受到那么大的力呢？这里我们需要了解到一个事情。当我们的手腕在中立位时，我们的手腕、手肘、小臂处于同一条线，力线垂直向下，重力垂直作用于前臂，相当于我们整个前臂来对抗重力。反观塌腕时我们单纯用手腕来对抗，很明显保持中立位是对我们的手腕很友好的。</p><h1 id="掰杠"><a href="#掰杠" class="headerlink" title="掰杠"></a>掰杠</h1><p>再说会掰杠，为什么很多博主会刻意提到掰杠中整个操作。这里我们来观察下，当我们不使用掰杠，单纯用正常的卧推姿势去卧推，我们杠铃位于我们的大鱼际上，这时我们可以发现，杠铃的重心是略微偏离我们的小臂垂直线的，这样可能会造成手腕略微压力增大。而我们手腕微微外旋我们就能发现，大鱼际和小鱼际近似处于一个平面，而平面和我们的小臂垂直线属于垂直。这时我们就可以达到我们前面所说的手腕中立位的“完美”卧推上臂姿势。</p><p>当然并不是说不掰杠就不好，掰杠的作用并不是单纯的为了减弱那么一丢丢力，而是我们的手腕本身就非常脆弱，软组织一旦损伤可以说这辈子都可能健身和say goodbye，毕竟这个软组织恢复慢、影响大，为了我们的日常生活和训练生活，我们一定要在动作标准的情况下尽最大可能避免受伤。</p><p>接下来就要说到掰杠最大的作用了——增加稳定性。健身的人通常都会熟悉一个名词叫做肩胛骨，可以说得肩胛骨者得天下（这话怎么和高中那会的得语文者得天下一模一样，不会提出这句话的人是语文老师吧）。肩胛骨负责了我们上半身非常多的作用，而卧推的准备过程中我们需要沉肩、稳定肩胛骨、稳定下半身、背部肌肉绷紧。这些无一例外都是为了稳定二字。而我们的掰杠，很大程度上是为了辅助我们去稳定肩胛骨，根据我微不足道的观察发现，现代人因为长时间伏案工作、滑手机已经导致我们的肩胛骨很容易形成翼状肩胛。翼状肩胛不仅难看而且非常影响我们的卧推稳定性（本次不讨论翼状肩胛对背部的影响，这个后续会写我自己背部训练还是有一定心得的）。也正因此掰杠提供的额外增加就很好的进行了补充。可以试一试先沉肩然后空手外旋，这时会发现我们的肩胛骨位置有明显的感觉。也正因此换到卧推当中，掰杠可以提供给我们额外的稳定性，让我们不至于把卧推做成诺克萨斯断头台🤣</p><h1 id="结束咯😝"><a href="#结束咯😝" class="headerlink" title="结束咯😝"></a>结束咯😝</h1><p>好的，相信看到这里的朋友已经明白为什么我会写这篇Blog了。从我自身角度来说，被指出问题后我对手腕姿势进行了修改，后续我卧推后也没有再出现特别难受的情况。同时我也去学习了掰杠技巧，进一步增强了卧推（虽然重量依旧没变化，大夏天真的吃啥都掉体重）。所以，我这一年中不断的磨合我的动作，不断上重量，不断学习。之前看到有人说过一句话“健身就是一年增重一年减重改动作的不断循环”，从我个人角度而言，我并不反对这句话，因为我自己这一年也是这么走过来的，从哑铃卧推6KG到现在的杠铃卧推60KG，从辅助引体需要50KG（那会我体重不到60）到现在轻松自重引体。但在这过程中我自己也在不断的反思学习，任何事情都是需要不断学习打磨，不断完善，世间并无一蹴而就的事情。</p><p>好咯，这次的Blog就到这里结束啦，有兴趣的朋友可以去我的IG看我拍的健身照片，不过应该看不出来啥区别，毕竟我发的时候已经有了一些变化了，最早很瘦的应该是没有的。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;满打满算健身也快一年了，身材也有了极其明显的变化。虽然因为长时间坐着不动外加kuku吃碳水导致腰上肉长得飞快，也正因此上半身感觉上下没啥分别。说回正题，这篇Blog主要是想聊一下我自己最近遇到的也是我这么长时间以来完全忽略的一点，还是两个健身房里的大佬一块换着练的时候被指出</summary>
      
    
    
    
    <category term="健身记录" scheme="https://lx02918.github.io/categories/%E5%81%A5%E8%BA%AB%E8%AE%B0%E5%BD%95/"/>
    
    
    <category term="健身" scheme="https://lx02918.github.io/tags/%E5%81%A5%E8%BA%AB/"/>
    
  </entry>
  
  <entry>
    <title>360技术综合H卷笔试——编程题记录</title>
    <link href="https://lx02918.github.io/2024/07/20/My-First-Blog/"/>
    <id>https://lx02918.github.io/2024/07/20/My-First-Blog/</id>
    <published>2024-07-20T11:53:11.000Z</published>
    <updated>2024-07-20T16:26:11.983Z</updated>
    
    <content type="html"><![CDATA[<p>360是我七月初就已经投的公司，同时也是我今年秋招第一个拿到笔试的公司。在考前按照往年的试卷估计题目应该是40道客观题2道编程题。实际结果也如预期一般，30多道的单选题，为数不多的多选题（每个卷子的题型不一样，maybe我这个卷子的少）以及2个编程题。接下来我将尽可能完整的复刻题目并阐述我自己的做法，同时也会附加我自己的代码，望各位看官满意。</p><h2 id="第一题-加密算法"><a href="#第一题-加密算法" class="headerlink" title="第一题 加密算法"></a><strong>第一题 加密算法</strong></h2><p>有两个人在研究加密算法，一个人提出对只包含小写英文字母的字符串，将 ’a’替换成 ’1’，将 ’b’;替换成 ’2’……，将 ’z’替换成 ’26’。比如一个字符串 ’aabac’（想不起来了，我编的），加密后变成了 ’11213’，但另外一个人提出困难会造成多个结果，就比如 ’11213’也可能是 ’kbm’，会产生多个结果。所以我们要做的就是计算某个加密后的字符串可能对应的原字符串个数，要求取模10^9+7。</p><p>输入：</p><p>第一行n是加密后的字符串长度</p><p>第二行是加密后的字符串</p><p>输出：</p><p>一个正整数表示原字符串个数</p><p>样例输入：</p><p>5</p><p>11213</p><p>样例输出：</p><p>8</p><p>在做题的时候我就感觉这题怎么这么熟悉，考完一看才发现这不就是leetcode 91 解码方法。</p><p>既然提到了那就顺便说一下这道题的思路吧，如果实在需要代码可以直接用笔试题的代码稍微改改应该maybe也能行？</p><p>首先这道题需要对一个问题进行多次匹配求解出多个情况。也就是说字符串’11213’可能被分为’1’和’1213’也可能被分为’11’和’213’类似于这样的不断进行。故而就想到了动态规划来解决。<br>接下来就需要具体构建：</p><ol><li>定义一个数组dp，其中dp[i]表示长度为i的加密字符串可能解码出的原字符串个数。</li><li>设置初始条件dp[0] &#x3D; 1，即空字符串有一种解码方式。</li><li>状态转移：<ul><li>如果当前字符可以作为有效的单字符解码(1 &lt;&#x3D; s[i - 1] &lt;&#x3D; 9)，则dp[i] +&#x3D; dp[i - 1]</li><li>如果当前字符和前一个字符可以作为一个有效的双字符解码(10 &lt;&#x3D; s[i - 2:i] &lt;&#x3D; 26)，则dp[i] +&#x3D; dp[i - 2]</li></ul></li><li>最终结果为dp[n]</li></ol><p>好的，接下来回到笔试的考题加密算法本身。</p><p>首先分析问题，我们需要给每个字母进行一一对应；加密后的字符串可能对应多个原字符串；我们需要对结果进行取模。<br>接下来来说说具体的思路：</p><ol><li>使用动态规划来解决</li><li>创建一个数组dp，其中dp[i]表示前i个数字可能对应的原字符串</li><li>对每个位置i，我们需要考虑单独解码和组合解码</li></ol><p>借助这个大致思路得到了下面的代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">count_possible_string</span>(<span class="hljs-params">encoded</span>):<br>    MOD = <span class="hljs-number">1000000007</span><br>    n = <span class="hljs-built_in">len</span>(encoded)<br>    dp = [<span class="hljs-number">0</span>] * (n + <span class="hljs-number">1</span>)<br>    dp[<span class="hljs-number">0</span>] = <span class="hljs-number">1</span><br>    dp[<span class="hljs-number">1</span>] = <span class="hljs-number">1</span> <span class="hljs-keyword">if</span> encoded[<span class="hljs-number">0</span>] != <span class="hljs-string">&#x27;0&#x27;</span> <span class="hljs-keyword">else</span> <span class="hljs-number">0</span><br>    <br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">2</span>, n + <span class="hljs-number">1</span>):<br>        <span class="hljs-comment"># 单独解码</span><br>        <span class="hljs-keyword">if</span> encoded[i - <span class="hljs-number">1</span>] != <span class="hljs-string">&#x27;0&#x27;</span>:<br>            dp[i] = dp[i - <span class="hljs-number">1</span>]<br>        <span class="hljs-comment"># 组合解码</span><br>        two_digit = <span class="hljs-built_in">int</span>(encoded[i - <span class="hljs-number">2</span>:i])<br>        <span class="hljs-keyword">if</span> <span class="hljs-number">10</span> &lt;= two_digit &lt;= <span class="hljs-number">26</span>:<br>            dp[i] = (dp[i] + dp[i - <span class="hljs-number">2</span>]) % MOD<br><br>    <span class="hljs-keyword">return</span> dp[n]<br><br><span class="hljs-comment"># 输入</span><br>n = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>())<br>encoded = <span class="hljs-built_in">input</span>()<br><br><span class="hljs-comment"># 输出</span><br>result = count_possible_string(encoded)<br><span class="hljs-built_in">print</span>(result)<br></code></pre></td></tr></table></figure><p>到这里第一题就结束了，不过我需要说明一点的是，我的代码并不是最优代码，只是能AC这道题，这里也只是提供一种代码和一种思路。</p><h2 id="第二题-传染病防控"><a href="#第二题-传染病防控" class="headerlink" title="第二题 传染病防控"></a>第二题 传染病防控</h2><p>某市正在进行传染病防控，某市有n个人，每个人有一个位置$(x_{i},y_{i})$。现在已知有一个是高风险人员，但不知道是谁。同时我们定义一个安全距离k，如果某个人和这个高风险人员的距离不超过k，那么这个人也将被列为高风险人员。所以我们现在需要帮工作人员得到最多的高风险人员数量。两个人$(x_1,y_1),(x_2,y_2)$的距离公式为$|x_1-x_2| + |y_1 - y_2|$。</p><p>输入描述：</p><p>一行两个整数n，k</p><p>接下来一行n个整数分别表示$x_1$到$x_n$</p><p>接下来一行n个整数分别表示$y_1$到$y_n$</p><p>输出描述：</p><p>输出一个整数表示最多的高风险人员数量</p><p>样例输入：（这里因为debug了好几遍输了好几遍所以还有记录，可以用原本的数）</p><p>5 2</p><p>8 6 1 5 1</p><p>4 4 3 4 6</p><p>样例输出：</p><p>3</p><p>首先明确一点，这个距离公式就是常用的曼哈顿距离，所以在正式写算法前需要先把这个距离公式给写了。</p><p>接下来说一下我的大致思路：</p><ol><li>首先构建图，根据输入的坐标和距离构建邻接矩阵<code>ajd</code></li><li>图的遍历：这里根据惯例选择DFS或BFS来遍历图，我选的是BFS，以此计算出某一点出发的最大连通节点数。</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">max_high_risk</span>(<span class="hljs-params">n, k, x, y</span>):<br>    <span class="hljs-keyword">from</span> collections <span class="hljs-keyword">import</span> deque<br><br>    <span class="hljs-comment"># 曼哈顿距离公式</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">manhatten_distance</span>(<span class="hljs-params">x1, y1, x2, y2</span>):<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">abs</span>(x1 - x2) + <span class="hljs-built_in">abs</span>(y1 - y2)<br><br>    <span class="hljs-comment"># 构建邻接表，adj[i]表示与第i个人相邻的所有人</span><br>    adj = [[] <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n)]<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n):<br>        <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(i + <span class="hljs-number">1</span>, n):<br>            <span class="hljs-keyword">if</span> manhatten_distance(x[i], y[i], x[j], y[j]) &lt;= k:<br>                adj[i].append(j)<br>                adj[j].append(i)<br><br>    <span class="hljs-comment"># 构建BFS            </span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">bfs</span>(<span class="hljs-params">start</span>):<br>        queue = deque([start])<br>        visited = <span class="hljs-built_in">set</span>([start])<br>        count = <span class="hljs-number">1</span><br>        <span class="hljs-keyword">while</span> queue:<br>            current = queue.popleft()<br>            <span class="hljs-keyword">for</span> neighbor <span class="hljs-keyword">in</span> adj[current]:<br>                <span class="hljs-keyword">if</span> neighbor <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> visited:<br>                    queue.append(neighbor)<br>                    visited.add(neighbor)<br>                    count += <span class="hljs-number">1</span><br>        <span class="hljs-keyword">return</span> count<br><br>    max_count = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n):<br>        max_count = <span class="hljs-built_in">max</span>(max_count, bfs(i))<br>    <span class="hljs-keyword">return</span> max_count<br><br><span class="hljs-comment"># 输入</span><br>n, k = <span class="hljs-built_in">map</span>(<span class="hljs-built_in">int</span>, <span class="hljs-built_in">input</span>().split())<br>x = <span class="hljs-built_in">list</span>(<span class="hljs-built_in">map</span>(<span class="hljs-built_in">int</span>, <span class="hljs-built_in">input</span>().split()))<br>y = <span class="hljs-built_in">list</span>(<span class="hljs-built_in">map</span>(<span class="hljs-built_in">int</span>, <span class="hljs-built_in">input</span>().split()))<br><br><span class="hljs-comment"># 输出</span><br><span class="hljs-built_in">print</span>(max_high_risk(n, k, x, y))<br></code></pre></td></tr></table></figure><p>到这里第二题也就结束了，我当时这道题debug了好几遍，第一次是输入不对，第二次是邻接矩阵出问题，到第三次才成功AC。再次说明我的代码仅仅只能通过所有样例完成这道题，并不是最优解。</p><p>最后附上一张在食堂吃饭的时候拍到的学长，超乖的一只猫咪，就是动作有那么一丝丝不文雅。</p><p><img src="/../img/first%20blog%20cover.jpg" alt="alt text"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;360是我七月初就已经投的公司，同时也是我今年秋招第一个拿到笔试的公司。在考前按照往年的试卷估计题目应该是40道客观题2道编程题。实际结果也如预期一般，30多道的单选题，为数不多的多选题（每个卷子的题型不一样，maybe我这个卷子的少）以及2个编程题。接下来我将尽可能完整的</summary>
      
    
    
    
    <category term="笔试记录" scheme="https://lx02918.github.io/categories/%E7%AC%94%E8%AF%95%E8%AE%B0%E5%BD%95/"/>
    
    
    <category term="笔试" scheme="https://lx02918.github.io/tags/%E7%AC%94%E8%AF%95/"/>
    
    <category term="算法题" scheme="https://lx02918.github.io/tags/%E7%AE%97%E6%B3%95%E9%A2%98/"/>
    
  </entry>
  
</feed>
